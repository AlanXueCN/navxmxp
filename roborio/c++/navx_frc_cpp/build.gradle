plugins {
  id 'cpp'
  id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2.2'
  id 'edu.wpi.first.NativeUtils' version '2.1.2'
  id 'edu.wpi.first.GradleVsCode' version '0.7.1'
}

apply from: 'config.gradle'

ext.chipObjectComponents = ['navx_frc']
ext.netCommComponents = ['navx_frc']
ext.sharedConfigs = [navx_frc: []]
ext.staticGtestConfigs = [:]

apply from: 'dependencies.gradle'

task copyFirmwareHeaders(type: Copy) {
    into("${projectDir}/include")
    from("${projectDir}/../../../stm32/navx-mxp") {
		include "**/AHRS*.h"
		include "**/IMU*.h"
	}
}

build.dependsOn(copyFirmwareHeaders)

model {
  exportsConfigs {
      navx_frc(ExportsConfig) {
          x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
          x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
      }
  }
  components {
    navx_frc(NativeLibrarySpec) {
//      sources {
//        cpp {
//          source {
//            srcDirs 'src'
//            include '**/*.cpp'
//          }
//          exportedHeaders {
//            srcDirs 'include'
//          }
//        }
//      }
      appendDebugPathToBinaries(binaries)
      binaries.all {
        if (it.targetPlatform.architecture.name == 'athena') {
          it.sources {
            athenaCpp(CppSourceSet) {
              source {
                srcDirs = ['src']
                include '**/*.cpp'
              }
              exportedHeaders {
                srcDirs 'include'
              }
            }
          }
        } else if (it.targetPlatform.architecture.name == 'raspberry') {
          it.sources {
            raspberryCpp(CppSourceSet) {
              source {
                srcDirs = ['raspberry']
                include '**/*.cpp'
              }
              exportedHeaders {
                srcDirs 'include'
              }
            }
          }
        } else {
          it.sources {
            desktopCpp(CppSourceSet) {
              source {
                srcDirs = ['src']
                include '**/*.cpp'
              }
              exportedHeaders {
                srcDirs 'include'
              }
            }
          }
        }
      }
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion = '5.0'
}
